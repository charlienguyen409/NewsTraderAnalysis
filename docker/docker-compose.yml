version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: market_analysis
      POSTGRES_USER: market_user
      POSTGRES_PASSWORD: market_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U market_user -d market_analysis"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: ../docker/backend/Dockerfile
    environment:
      DATABASE_URL: postgresql://market_user:market_password@postgres:5432/market_analysis
      REDIS_URL: redis://redis:6379
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      MAX_POSITIONS: ${MAX_POSITIONS:-10}
      MIN_CONFIDENCE: ${MIN_CONFIDENCE:-0.7}
      SCRAPING_RATE_LIMIT: ${SCRAPING_RATE_LIMIT:-10}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../backend:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/frontend/Dockerfile
    environment:
      VITE_API_URL: http://localhost:8000
      VITE_WS_URL: ws://localhost:8000/ws
    ports:
      - "3001:3000"
    depends_on:
      - backend
    volumes:
      - ../frontend:/app
      - frontend_node_modules:/app/node_modules
    command: npm run dev

volumes:
  postgres_data:
  redis_data:
  frontend_node_modules: