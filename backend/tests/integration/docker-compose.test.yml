version: '3.8'

services:
  # PostgreSQL Test Database
  test-postgres:
    image: postgres:15-alpine
    container_name: test_postgres_integration
    environment:
      POSTGRES_DB: test_market_analysis
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
    ports:
      - "5433:5432"
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d test_market_analysis"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  # Redis Test Cache
  test-redis:
    image: redis:7-alpine
    container_name: test_redis_integration
    ports:
      - "6380:6379"
    volumes:
      - test_redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  # Test Runner Service (optional)
  test-runner:
    build:
      context: ../../..
      dockerfile: tests/integration/Dockerfile.test
    container_name: test_runner_integration
    depends_on:
      test-postgres:
        condition: service_healthy
      test-redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://test_user:test_password@test-postgres:5432/test_market_analysis
      REDIS_URL: redis://test-redis:6379
      TESTING: "true"
    volumes:
      - ../../..:/app
    working_dir: /app
    command: python -m pytest tests/integration/test_workflows.py -v
    networks:
      - test-network

volumes:
  test_postgres_data:
  test_redis_data:

networks:
  test-network:
    driver: bridge